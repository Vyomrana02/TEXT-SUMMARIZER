# -*- coding: utf-8 -*-
"""AUDIO_TO_TEXT.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wZP-4b8SW2lzrRM1AiGUfBGNRU1MIAPM
"""

# import speech_recognition as sr
# print(sr.__version__)
# r = sr.Recognizer()

# file_audio = sr.AudioFile('AudioSummarizer/TestAudio.wav')

# with file_audio as source:
#    audio_text = r.record(source)

# # print(type(audio_text))
# r_docs = r.recognize_google(audio_text)
# print(r_docs)





#----------------------------------------

# importing libraries 
import speech_recognition as sr 
import os 
from pydub import AudioSegment
from pydub.silence import split_on_silence

# create a speech recognition object
r = sr.Recognizer()

# a function that splits the audio file into chunks
# and applies speech recognition
def get_large_audio_transcription(path):
    """
    Splitting the large audio file into chunks
    and apply speech recognition on each of these chunks
    """
    # open the audio file using pydub
    sound = AudioSegment.from_wav(path)  
    # split audio sound where silence is 700 miliseconds or more and get chunks
    chunks = split_on_silence(sound,
        # experiment with this value for your target audio file
        min_silence_len = 800,
        # adjust this per requirement
        silence_thresh = sound.dBFS-14,
        # keep the silence for 1 second, adjustable as well
        keep_silence=800,
    )
    folder_name = "audio-chunks"
    # create a directory to store the audio chunks
    if not os.path.isdir(folder_name):
        os.mkdir(folder_name)
    whole_text = ""
    # process each chunk 
    for i, audio_chunk in enumerate(chunks, start=1):
        # export audio chunk and save it in
        # the `folder_name` directory.
        chunk_filename = os.path.join(folder_name, f"chunk{i}.wav")
        audio_chunk.export(chunk_filename, format="wav")
        # recognize the chunk
        with sr.AudioFile(chunk_filename) as source:
            audio_listened = r.record(source)
            # try converting it to text
            try:
                text = r.recognize_google(audio_listened)
            except sr.UnknownValueError as e:
                print("Error:", str(e))
            else:
                text = f"{text.capitalize()}. "
                #print(chunk_filename, ":", text)
                whole_text += text
    # return the text for all chunks detected
    return whole_text

# pip install SpeechRecognition

# !pip install rpunct

# from rpunct import RestorePuncts
# use_cuda=False
# print(RestorePuncts(use_cuda=False).punctuate(r_docs))








# -*- coding: utf-8 -*-
"""TEXT_SUMMARIZER_BACKEND.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HddcwH3tQhioCp7dcnKEhFV3AiQ9YT3h
"""

import nltk
# nltk.download('stopwords')

# from nltk.corpus import stopwords

from nltk.cluster.util import cosine_distance
import numpy as np
import networkx as nx

def read_article(file_name):
    file = open(file_name, "r")
    filedata = file.readlines()
    print(filedata)
    article = filedata[0].split(".")
    sentences = []

    for sentence in article:
        print(sentence)
        sentences.append(sentence.replace("[^a-zA-Z]", " ").split(" "))
    sentences.pop() 
    # sentences = "aa"
    return sentences

def sentence_similarity(sent1, sent2, stopwords=None):
    if stopwords is None:
        stopwords = ['i', 'me', 'my', 'myself', 'we', 'our', 'ours', 'ourselves', 'you', "you're", "you've", "you'll", "you'd", 'your', 'yours', 'yourself', 'yourselves', 'he', 'him', 'his', 'himself', 'she', "she's", 'her', 'hers', 'herself', 'it', "it's", 'its', 'itself', 'they', 'them', 'their', 'theirs', 'themselves', 'what', 'which', 'who', 'whom', 'this', 'that', "that'll", 'these', 'those', 'am', 'is', 'are', 'was', 'were', 'be', 'been', 'being', 'have', 'has', 'had', 'having', 'do', 'does', 'did', 'doing', 'a', 'an', 'the', 'and', 'but', 'if', 'or', 'because', 'as', 'until', 'while', 'of', 'at', 'by', 'for', 'with', 'about', 'against', 'between', 'into', 'through', 'during', 'before', 'after', 'above', 'below', 'to', 'from', 'up',
                     'down', 'in', 'out', 'on', 'off', 'over', 'under', 'again', 'further', 'then', 'once', 'here', 'there', 'when', 'where', 'why', 'how', 'all', 'any', 'both', 'each', 'few', 'more', 'most', 'other', 'some', 'such', 'no', 'nor', 'not', 'only', 'own', 'same', 'so', 'than', 'too', 'very', 's', 't', 'can', 'will', 'just', 'don', "don't", 'should', "should've", 'now', 'd', 'll', 'm', 'o', 're', 've', 'y', 'ain', 'aren', "aren't", 'couldn', "couldn't", 'didn', "didn't", 'doesn', "doesn't", 'hadn', "hadn't", 'hasn', "hasn't", 'haven', "haven't", 'isn', "isn't", 'ma', 'mightn', "mightn't", 'mustn', "mustn't", 'needn', "needn't", 'shan', "shan't", 'shouldn', "shouldn't", 'wasn', "wasn't", 'weren', "weren't", 'won', "won't", 'wouldn', "wouldn't"]
 
    sent1 = [w.lower() for w in sent1]
    sent2 = [w.lower() for w in sent2]
 
    all_words = list(set(sent1 + sent2))
 
    vector1 = [0] * len(all_words)
    vector2 = [0] * len(all_words)

    for w in sent1:
        if w in stopwords:
            continue
        vector1[all_words.index(w)] += 1
 
    for w in sent2:
        if w in stopwords:
            continue
        vector2[all_words.index(w)] += 1
 
    return 1 - cosine_distance(vector1, vector2)

def build_similarity_matrix(sentences, stop_words):
    similarity_matrix = np.zeros((len(sentences), len(sentences)))
 
    for idx1 in range(len(sentences)):
        for idx2 in range(len(sentences)):
            if idx1 == idx2:
                continue 
            similarity_matrix[idx1][idx2] = sentence_similarity(sentences[idx1], sentences[idx2], stop_words)

    return similarity_matrix

def generate_summary(file_name, top_n=5):

    # stop_words = set(stopwords.words('english'))
    summarize_text = []

    sentences =  read_article(file_name)
    sentence_similarity_martix = build_similarity_matrix(sentences, [])
    print(sentence_similarity_martix)
    sentence_similarity_graph = nx.from_numpy_array(sentence_similarity_martix)
    print(sentence_similarity_graph)

    
    G = nx.DiGraph(sentence_similarity_graph)
    scores = nx.pagerank(G)
    print(scores)

    ranked_sentence = sorted(((scores[i],s) for i,s in enumerate(sentences)), reverse=True)    
    print("Indexes of top ranked_sentence order are ", ranked_sentence)    

    for i in range(min(top_n,len(ranked_sentence))):
      summarize_text.append(" ".join(ranked_sentence[i][1]))
    
  

    # print("Summarize Text: \n", ". ".join(summarize_text))
    return summarize_text


# generate_summary("TextSummarizer/msft.txt", 7)

# f = open('msft.txt', 'r')
# file_contents = f.read()
# print (file_contents)
# f.close()

# 1st run this
#!pip install scipy==1.8.0









def main_call():
    para = get_large_audio_transcription("AudioSummarizer/TestAudio.wav")
    print(para)
    with open('AudioSummarizer/msft.txt', 'w') as file:
        for line in para:
            file.writelines(line)
    generate_summary("AudioSummarizer/msft.txt", 7)

# f = open('msft.txt', 'r')
# file_contents = f.read()
# print (file_contents)
# f.close()

# 1st run this
#!pip install scipy==1.8.0
